name: Sync Microsoft.Build version in analyzer template with Version.props
on:
  push:
    branches:
      - main
      - SyncTest
    paths:
      - 'eng/Versions.props'

jobs:
  Sync-version:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.ref }}

    - name: Set baseBranch variable
      id: vars
      run: echo "##[set-output name=baseBranch;]${{ github.ref_name }}"

    - name: Update analyzer template version with version from Versions.props
      shell: pwsh
      run: |
        try {
            # Define the paths to your XML and JSON files
            $xmlFilePath = "eng/Versions.props"
            $jsonFilePath = "template_feed/content/Microsoft.AnalyzerTemplate/.template.config/template.json"

            # Check if the XML file exists
            if (-Not (Test-Path -Path $xmlFilePath)) {
                throw "Versions.props file not found: $xmlFilePath"
            }

            # Load and parse the XML content
            [xml]$xmlContent = Get-Content -Path $xmlFilePath
            $versionPrefix = [string]$xmlContent.Project.PropertyGroup.VersionPrefix

            # Validate the versionPrefix
            if ([string]::IsNullOrWhiteSpace($versionPrefix)) {
                throw "VersionPrefix is empty or null in the XML file: $xmlFilePath"
            }

            # Check if the JSON file exists
            if (-Not (Test-Path -Path $jsonFilePath)) {
                throw "Analyzer template file not found: $jsonFilePath"
            }

            # Load the JSON template
            $jsonContent = Get-Content -Path $jsonFilePath -Raw | ConvertFrom-Json

            # Update the defaultValue of MicrosoftBuildVersion in the JSON template
            $jsonContent.symbols.MicrosoftBuildVersion.defaultValue = $versionPrefix.Trim()

            # Convert the JSON content back to a string
            $jsonString = $jsonContent | ConvertTo-Json -Depth 10

            # Write the updated JSON back to the file
            Set-Content -Path $jsonFilePath -Value $jsonString
            Write-Output "Updated MicrosoftBuildVersion to $versionPrefix"
        }
        catch {
            Write-Error "An error occurred: $_"
        }

    - name: Create Pull Request
      uses: actions/github-script@v7
      with:
        script: |
         const fs = require('fs');  // Import the fs module
         const newBranch = 'update-msbuild-version-for-analyzer-template';
         const baseBranch = '${{ steps.vars.outputs.baseBranch }}';
         const commitMessage = 'Update MicrosoftBuildVersion to $versionPrefix';
         const filePath = 'template_feed/content/Microsoft.AnalyzerTemplate/.template.config/template.json';
         const fileContent = fs.readFileSync(filePath, 'utf8');
          
         // Helper function to check if a branch exists
         async function branchExists(branch) {
            try {
              await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `heads/${branch}`,
              });
              return true;
            } catch (error) {
              if (error.status === 404) {
                return false;
              }
              throw error;
            }
          }
          
          // Helper function to create a new branch
          async function createBranch() {
            const { data: refData } = await github.rest.git.getRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `heads/${baseBranch}`,
            });
            
            const newRef = `refs/heads/${newBranch}`;
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: newRef,
              sha: refData.object.sha,
            });
          }
          
          // Helper function to commit changes
          async function commitChanges() {
            const { data: blobData } = await github.rest.git.createBlob({
              owner: context.repo.owner,
              repo: context.repo.repo,
              content: Buffer.from(fileContent).toString('base64'),
              encoding: 'base64',
            });
            
            const { data: commitData } = await github.rest.git.createCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              message: commitMessage,
              tree: blobData.sha,
              parents: [refData.object.sha],
            });
            
            await github.rest.git.updateRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `heads/${newBranch}`,
              sha: commitData.sha,
            });
          }

          // Helper function to create a pull request
          async function createPullRequest() {
            try {
              await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                head: newBranch,
                base: baseBranch,
                body: body,
              });
            } catch (error) {
              core.setFailed(`Failed to create a pull request: ${error.message}`);
            }
          }
          
          // Main execution
          try {
            const branchExists = await branchExists(newBranch);
            if (!branchExists) {
              await createBranch();
            } else {
              core.info(`Branch ${newBranch} already exists`);
            }
            await commitChanges();
            
            // Check if a pull request already exists
            const { data: pullRequests } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${newBranch}`,
              state: 'open',
            });
          
            if (pullRequests.length === 0) {
              await createPullRequest();
            } else {
              core.info(`Pull request already exists for branch ${newBranch}`);
            }
          } catch (error) {
            core.setFailed(`Failed to create and push branch: ${error.message}`);
          }
