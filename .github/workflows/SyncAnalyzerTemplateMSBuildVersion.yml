name: Sync Microsoft.Build version in analyzer template with Version.props
on:
  push:
    branches:
      - main
      - SyncTest
    paths:
      - 'eng/Versions.props'

jobs:
  Sync-version:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Update analyzer template version with version from Versions.props
      shell: pwsh
      run: |
        try {
            # Define the paths to your XML and JSON files
            $xmlFilePath = "eng/Versions.props"
            $jsonFilePath = "template_feed/content/Microsoft.AnalyzerTemplate/.template.config/template.json"

            # Check if the XML file exists
            if (-Not (Test-Path -Path $xmlFilePath)) {
                throw "Versons.props file not found: $xmlFilePath"
            }

            # Load and parse the XML content
            [xml]$xmlContent = Get-Content -Path $xmlFilePath
            $versionPrefix = [string]$xmlContent.Project.PropertyGroup.VersionPrefix

            # Validate the versionPrefix
            if ([string]::IsNullOrWhiteSpace($versionPrefix)) {
                throw "VersionPrefix is empty or null in the XML file: $xmlFilePath"
            }

            # Check if the JSON file exists
            if (-Not (Test-Path -Path $jsonFilePath)) {
                throw "Analyzer template file not found: $jsonFilePath"
            }

            # Load the JSON template
            $jsonContent = Get-Content -Path $jsonFilePath -Raw | ConvertFrom-Json

            # Update the defaultValue of MicrosoftBuildVersion in the JSON template
            $jsonContent.symbols.MicrosoftBuildVersion.defaultValue = $versionPrefix.Trim()

            # Convert the JSON content back to a string
            $jsonString = $jsonContent | ConvertTo-Json -Depth 10

            # Write the updated JSON back to the file
            Set-Content -Path $jsonFilePath -Value $jsonString
            Write-Output "Updated MicrosoftBuildVersion to $versionPrefix"
        }
        catch {
            Write-Error "An error occurred: $_"
        }

    - name: Create Pull Request
      uses: actions/github-script@v7
      with:
        script: |
          const newBranch = 'update-msbuild-version-for-analyzer-template';
          const baseBranch = 'main';
          const title = 'Update MicrosoftBuildVersion in analyzer template';
          const body = '[Automated] Update the MicrosoftBuildVersion defaultValue in the template.json.';
          const commitMessage = 'Update MicrosoftBuildVersion in analyzer template';
          
          // Helper function to get the latest commit
          async function getLatestCommit() {
            try {
              const { data: refData } = await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `heads/${context.ref.replace('refs/heads/', '')}`,
              });
              const commitSHA = refData.object.sha;
          
              const { data: commitData } = await github.rest.git.getCommit({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: commitSHA,
              });
          
              console.log('Latest Commit:', commitData); // Log the latest commit details
          
              return commitData;
            } catch (error) {
              core.setFailed(`Failed to get the latest commit: ${error.message}`);
            }
          }
          
          // Helper function to create a new commit
          async function createNewCommit(treeSHA) {
            try {
              const { data: commitData } = await github.rest.git.createCommit({
                owner: context.repo.owner,
                repo: context.repo.repo,
                message: commitMessage,
                tree: treeSHA,
                parents: [context.sha],
              });
              return commitData.sha;
            } catch (error) {
              core.setFailed(`Failed to create a new commit: ${error.message}`);
            }
          }
          
          // Helper function to update the reference to point to the new commit
          async function updateRef(branch, sha) {
            try {
              await github.rest.git.updateRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `heads/${branch}`,
                sha: sha,
              });
            } catch (error) {
              core.setFailed(`Failed to update the reference: ${error.message}`);
            }
          }
          
          // Helper function to create a new branch
          async function createNewBranch(sha) {
            try {
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/heads/${newBranch}`,
                sha: sha,
              });
            } catch (error) {
              if (error.status === 422 && error.response.data.message === 'Reference already exists') {
                core.warning(`Branch ${newBranch} already exists. Using the existing branch.`);
              } else {
                core.setFailed(`Failed to create a new branch: ${error.message}`);
              }
            }
          }
          
          // Helper function to create a pull request
          async function createPullRequest() {
            try {
              await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                head: newBranch,
                base: baseBranch,
                body: body,
              });
            } catch (error) {
              core.setFailed(`Failed to create a pull request: ${error.message}`);
            }
          }
          
          // Main execution
          try {
            const latestCommit = await getLatestCommit();
            // Check if a pull request already exists
            const { data: pullRequests } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${newBranch}`,
              state: 'open',
            });
          
            if (pullRequests.length === 0) {
              await createNewBranch(latestCommit.sha);
              const newCommitSHA = await createNewCommit(latestCommit.tree.sha);
              await updateRef(newBranch, newCommitSHA);
              await createPullRequest();
            } else {
              core.info(`Pull request already exists for branch ${newBranch}. Adding new commit to the existing pull request.`);
              const newCommitSHA = await createNewCommit(latestCommit.tree.sha);
              await updateRef(newBranch, newCommitSHA);
            }
          } catch (error) {
            core.setFailed(`Failed to complete the process: ${error.message}`);
          }

