name: Sync Microsoft.Build version in analyzer template with Version.props
on:
  push:
    branches:
      - main
      - SyncTest
    paths:
      - 'eng/Versions.props'

jobs:
  Sync-version:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.ref }}

    - name: Set baseBranch variable
      id: vars
      run: echo "baseBranch=${{ github.ref_name }}" >> $GITHUB_ENV

    - name: Update analyzer template version with version from Versions.props
      id: update-version
      shell: pwsh
      run: |
        try {
            # Define the paths to your XML and JSON files
            $xmlFilePath = "eng/Versions.props"
            $jsonFilePath = "template_feed/content/Microsoft.AnalyzerTemplate/.template.config/template.json"

            # Check if the XML file exists
            if (-Not (Test-Path -Path $xmlFilePath)) {
                throw "Versions.props file not found: $xmlFilePath"
            }

            # Load and parse the XML content
            [xml]$xmlContent = Get-Content -Path $xmlFilePath
            $versionPrefix = [string]$xmlContent.Project.PropertyGroup.VersionPrefix

            # Validate the versionPrefix
            if ([string]::IsNullOrWhiteSpace($versionPrefix)) {
                throw "VersionPrefix is empty or null in the XML file: $xmlFilePath"
            }

            # Check if the JSON file exists
            if (-Not (Test-Path -Path $jsonFilePath)) {
                throw "Analyzer template file not found: $jsonFilePath"
            }

            # Load the JSON template
            $jsonContent = Get-Content -Path $jsonFilePath -Raw | ConvertFrom-Json

            # Update the defaultValue of MicrosoftBuildVersion in the JSON template
            $jsonContent.symbols.MicrosoftBuildVersion.defaultValue = $versionPrefix.Trim()

            # Convert the JSON content back to a string
            $jsonString = $jsonContent | ConvertTo-Json -Depth 10

            # Write the updated JSON back to the file
            Set-Content -Path $jsonFilePath -Value $jsonString
            Write-Output "Updated MicrosoftBuildVersion to $versionPrefix"

            # Set the versionPrefix  and template filePath as an output
            echo "versionPrefix=$versionPrefix" >> $GITHUB_ENV
            echo "jsonFilePath=$jsonFilePath" >> $GITHUB_ENV
            
        }
        catch {
            Write-Error "An error occurred: $_"
        }

    - name: Create Pull Request
      uses: actions/github-script@v7
      with:
        script: |
          const baseBranch = process.env.baseBranch;
          const versionPrefix = process.env.versionPrefix;
          const filePath = process.env.jsonFilePath;
          const newBranch = `${baseBranch}-update-msbuild-version-for-analyzer-template`;
          const commitMessage = `Update MicrosoftBuildVersion to ${versionPrefix}`;
          const prBody = '[Automated] Update the MicrosoftBuildVersion defaultValue in the template.json.';
          const prTitle = 'Update MicrosoftBuildVersion in analyzer template';

          // Main execution
          (async () => {
            try {
              // Configure git
              await exec.exec(`git config user.name "github-actions"`);
              await exec.exec(`git config user.email "github-actions@github.com"`);
          
              // Create and switch to the new branch
              await exec.exec('git', ['checkout', '-b', newBranch]);
          
              // Skip opening PR if the branch already exists on the origin remote
              let should_open_pull_request = true;
              try {
                await exec.exec(`git ls-remote --exit-code --heads origin ${newBranch}`);
                should_open_pull_request = false;
              } catch {}

              // Stage the changes
              await exec.exec(`git add ${filePath}`);
      
              // Commit the changes
              await exec.exec(`git commit -m "${commitMessage}"`);
      
              // Push the temp branch to the repository
              await exec.exec(`git push --force --set-upstream origin HEAD:${newBranch}`);

              if (!should_open_pull_request) {
                console.log("the PR already exists, skipping opening a new PR.");
                return;
              }

              // Create the PR
              await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: prTitle,
                body: prBody,
                head: newBranch,
                base: baseBranch
              });
            } catch (error) {
              core.setFailed(error)
            }
          })();
