name: Sync Microsoft.Build version in analyzer template with Version.props
on:
  push:
    branches:
      - main
      - SyncTest
    paths:
      - 'eng/Versions.props'

jobs:
  Sync-version:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.ref }}

    - name: Set baseBranch variable
      id: vars
      run: echo "##[set-output name=baseBranch;]${{ github.ref_name }}"

    - name: Update analyzer template version with version from Versions.props
      id: update-version
      shell: pwsh
      run: |
        try {
            # Define the paths to your XML and JSON files
            $xmlFilePath = "eng/Versions.props"
            $jsonFilePath = "template_feed/content/Microsoft.AnalyzerTemplate/.template.config/template.json"

            # Check if the XML file exists
            if (-Not (Test-Path -Path $xmlFilePath)) {
                throw "Versions.props file not found: $xmlFilePath"
            }

            # Load and parse the XML content
            [xml]$xmlContent = Get-Content -Path $xmlFilePath
            $versionPrefix = [string]$xmlContent.Project.PropertyGroup.VersionPrefix

            # Validate the versionPrefix
            if ([string]::IsNullOrWhiteSpace($versionPrefix)) {
                throw "VersionPrefix is empty or null in the XML file: $xmlFilePath"
            }

            # Check if the JSON file exists
            if (-Not (Test-Path -Path $jsonFilePath)) {
                throw "Analyzer template file not found: $jsonFilePath"
            }

            # Load the JSON template
            $jsonContent = Get-Content -Path $jsonFilePath -Raw | ConvertFrom-Json

            # Update the defaultValue of MicrosoftBuildVersion in the JSON template
            $jsonContent.symbols.MicrosoftBuildVersion.defaultValue = $versionPrefix.Trim()

            # Convert the JSON content back to a string
            $jsonString = $jsonContent | ConvertTo-Json -Depth 10

            # Write the updated JSON back to the file
            Set-Content -Path $jsonFilePath -Value $jsonString
            Write-Output "Updated MicrosoftBuildVersion to $versionPrefix"

            # Set the versionPrefix as an output
            echo "##[set-output name=versionPrefix;]$versionPrefix"
        }
        catch {
            Write-Error "An error occurred: $_"
        }

    - name: Create Pull Request
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');  // Import the fs module
          const newBranch = 'update-msbuild-version-for-analyzer-template2';
          const baseBranch = '${{ steps.vars.outputs.baseBranch }}';
          const versionPrefix = '${{ steps.update-version.outputs.versionPrefix }}';
          const commitMessage = `Update MicrosoftBuildVersion to ${versionPrefix}`;
          const filePath = 'template_feed/content/Microsoft.AnalyzerTemplate/.template.config/template.json';
          const fileContent = fs.readFileSync(filePath, 'utf8');
    
          // Main execution
          // configure git
          await exec.exec(`git config user.name "github-actions"`);
          await exec.exec(`git config user.email "github-actions@github.com"`);
            
          // Create and switch to the new branch
          await exec.exec('git', ['checkout', '-b', newBranch]);
            
          // skip opening PR if the branch already exists on the origin remote since that means it was opened
          // by an earlier backport and force pushing to the branch updates the existing PR
          let should_open_pull_request = true;
          try {
            await exec.exec(`git ls-remote --exit-code --heads origin ${temp_branch}`);
            should_open_pull_request = false;
          } catch { }

          // download and apply patch
          await exec.exec(`curl -sSL "${context.payload.issue.pull_request.patch_url}" --output changes.patch`);

          const git_am_command = "git am --3way --ignore-whitespace --keep-non-patch changes.patch";
          let git_am_output = `$ ${git_am_command}\n\n`;
          let git_am_failed = false;
          try {
            await exec.exec(git_am_command, [], {
              listeners: {
                stdout: function stdout(data) { git_am_output += data; },
                stderr: function stderr(data) { git_am_output += data; }
              }
            });
          } catch (error) {
            git_am_output += error;
            git_am_failed = true;
          }

          if (git_am_failed) {
            const git_am_failed_body = `@${context.payload.comment.user.login} backporting to ${target_branch} failed, the patch most likely resulted in conflicts:\n\n\`\`\`shell\n${git_am_output}\n\`\`\`\n\nPlease backport manually!`;
            await github.rest.issues.createComment({
              owner: repo_owner,
              repo: repo_name,
              issue_number: pr_number,
              body: git_am_failed_body
            });
            throw new Error("Error: git am failed, most likely due to a merge conflict.", false);
          }
          else {
            // push the temp branch to the repository
            await exec.exec(`git push --force --set-upstream origin HEAD:${temp_branch}`);
          }
            
            // Create a pull request
            # await github.rest.pulls.create({
            #   owner: context.repo.owner,
            #   repo: context.repo.repo,
            #   title: 'Update MicrosoftBuildVersion in analyzer template',
            #   head: newBranch,
            #   base: baseBranch,
            #   body: '[Automated] Update the MicrosoftBuildVersion defaultValue in the template.json.',
            # });

